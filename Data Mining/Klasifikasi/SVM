{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNjy2hDzCDoyqM+ppDDTZLK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Yuninda Intan  21051214025\n","# Sistem Informasi 2021 A"],"metadata":{"id":"mlq3hWmj6Rja"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"jDH58SxvrLWe"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.datasets import load_iris\n","from sklearn.svm import SVC\n","from sklearn.metrics import classification_report, confusion_matrix\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","dataset =['class', 'alcohol', 'malicacid', 'ash', 'alcanility of ash', 'magnesium', 'total phenols', 'flavanoids','nonflavanoids phenols', 'proanthocyanins','color intensity','hue','0d280_0D315 of diluted wines','proline']\n","dataset=pd.read_csv('wine.data',names=dataset)\n","X=dataset.drop('class',axis=1)\n","y=dataset['class']\n","dataset.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":208},"id":"-wgK2_xbrXeA","executionInfo":{"status":"ok","timestamp":1696183951074,"user_tz":-420,"elapsed":123,"user":{"displayName":"SIA_025_Yuninda Intan","userId":"01065866818441895118"}},"outputId":"09fe77ae-46be-44f3-8f14-d20b35088025"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   class  alcohol  malicacid   ash  alcanility of ash  magnesium  \\\n","0      1    14.23       1.71  2.43               15.6        127   \n","1      1    13.20       1.78  2.14               11.2        100   \n","2      1    13.16       2.36  2.67               18.6        101   \n","3      1    14.37       1.95  2.50               16.8        113   \n","4      1    13.24       2.59  2.87               21.0        118   \n","\n","   total phenols  flavanoids  nonflavanoids phenols  proanthocyanins  \\\n","0           2.80        3.06                   0.28             2.29   \n","1           2.65        2.76                   0.26             1.28   \n","2           2.80        3.24                   0.30             2.81   \n","3           3.85        3.49                   0.24             2.18   \n","4           2.80        2.69                   0.39             1.82   \n","\n","   color intensity   hue  0d280_0D315 of diluted wines  proline  \n","0             5.64  1.04                          3.92     1065  \n","1             4.38  1.05                          3.40     1050  \n","2             5.68  1.03                          3.17     1185  \n","3             7.80  0.86                          3.45     1480  \n","4             4.32  1.04                          2.93      735  "],"text/html":["\n","  <div id=\"df-dadd1447-5378-44db-bba6-7edff60ded0a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>class</th>\n","      <th>alcohol</th>\n","      <th>malicacid</th>\n","      <th>ash</th>\n","      <th>alcanility of ash</th>\n","      <th>magnesium</th>\n","      <th>total phenols</th>\n","      <th>flavanoids</th>\n","      <th>nonflavanoids phenols</th>\n","      <th>proanthocyanins</th>\n","      <th>color intensity</th>\n","      <th>hue</th>\n","      <th>0d280_0D315 of diluted wines</th>\n","      <th>proline</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>14.23</td>\n","      <td>1.71</td>\n","      <td>2.43</td>\n","      <td>15.6</td>\n","      <td>127</td>\n","      <td>2.80</td>\n","      <td>3.06</td>\n","      <td>0.28</td>\n","      <td>2.29</td>\n","      <td>5.64</td>\n","      <td>1.04</td>\n","      <td>3.92</td>\n","      <td>1065</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>13.20</td>\n","      <td>1.78</td>\n","      <td>2.14</td>\n","      <td>11.2</td>\n","      <td>100</td>\n","      <td>2.65</td>\n","      <td>2.76</td>\n","      <td>0.26</td>\n","      <td>1.28</td>\n","      <td>4.38</td>\n","      <td>1.05</td>\n","      <td>3.40</td>\n","      <td>1050</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>13.16</td>\n","      <td>2.36</td>\n","      <td>2.67</td>\n","      <td>18.6</td>\n","      <td>101</td>\n","      <td>2.80</td>\n","      <td>3.24</td>\n","      <td>0.30</td>\n","      <td>2.81</td>\n","      <td>5.68</td>\n","      <td>1.03</td>\n","      <td>3.17</td>\n","      <td>1185</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>14.37</td>\n","      <td>1.95</td>\n","      <td>2.50</td>\n","      <td>16.8</td>\n","      <td>113</td>\n","      <td>3.85</td>\n","      <td>3.49</td>\n","      <td>0.24</td>\n","      <td>2.18</td>\n","      <td>7.80</td>\n","      <td>0.86</td>\n","      <td>3.45</td>\n","      <td>1480</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>13.24</td>\n","      <td>2.59</td>\n","      <td>2.87</td>\n","      <td>21.0</td>\n","      <td>118</td>\n","      <td>2.80</td>\n","      <td>2.69</td>\n","      <td>0.39</td>\n","      <td>1.82</td>\n","      <td>4.32</td>\n","      <td>1.04</td>\n","      <td>2.93</td>\n","      <td>735</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dadd1447-5378-44db-bba6-7edff60ded0a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dadd1447-5378-44db-bba6-7edff60ded0a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dadd1447-5378-44db-bba6-7edff60ded0a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fc2546fb-4baf-464d-b880-a7fcc895b577\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc2546fb-4baf-464d-b880-a7fcc895b577')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fc2546fb-4baf-464d-b880-a7fcc895b577 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["#Transformasi variabel\n","from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)"],"metadata":{"id":"UUOhAQpVr312"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Reduksi Dimensi dengan PCA\n","from mpl_toolkits.mplot3d import Axes3D\n","from sklearn.decomposition import PCA\n","\n","fig = plt.figure(1, figsize=(16, 9))\n","ax = Axes3D(fig, elev=-150, azim=110)\n","X_reduced = PCA(n_components=7).fit_transform(X_scaled)\n","ax.scatter(X_reduced[:, 0], X_reduced[:, 1], X_reduced[:, 2], c=y,\n","           cmap=plt.cm.Set1, edgecolor='k', s=40)\n","ax.set_title(\"First three PCA directions\")\n","ax.set_xlabel(\"1st eigenvector\")\n","ax.xaxis.set_ticklabels([])\n","ax.set_ylabel(\"2nd eigenvector\")\n","ax.yaxis.set_ticklabels([])\n","ax.set_zlabel(\"3rd eigenvector\")\n","ax.zaxis.set_ticklabels([])\n","\n","plt.show()\n","print(\"The number of features in the new subspace is \" ,X_reduced.shape[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"dwimykodr8ts","executionInfo":{"status":"ok","timestamp":1696183951079,"user_tz":-420,"elapsed":92,"user":{"displayName":"SIA_025_Yuninda Intan","userId":"01065866818441895118"}},"outputId":"68acb510-e6f2-4f7f-b576-486050aae037"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x900 with 0 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["The number of features in the new subspace is  7\n"]}]},{"cell_type":"code","source":["plt.show()\n","print(\"The number of features in the new subspace is \" ,X_reduced.shape[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ifqO_0uEsFeI","executionInfo":{"status":"ok","timestamp":1696183951080,"user_tz":-420,"elapsed":89,"user":{"displayName":"SIA_025_Yuninda Intan","userId":"01065866818441895118"}},"outputId":"02386878-b6fd-4741-d02f-c8b4c355eab4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The number of features in the new subspace is  7\n"]}]},{"cell_type":"code","source":["#Split Data Training dan Testing\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","                        X_reduced, y, test_size=0.2, random_state=101)"],"metadata":{"id":"2l8zIeDxsVuz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Liniear SVC\n","from sklearn.svm import LinearSVC\n","import warnings\n","warnings.filterwarnings('ignore')\n","#warnings.filterwarnings(action='once')\n","\n","clf = LinearSVC(penalty='l2', loss='squared_hinge',\n","                dual=True, tol=0.0001, C=100, multi_class='ovr',\n","                fit_intercept=True, intercept_scaling=1, class_weight=None,verbose=0\n","                , random_state=0, max_iter=1000)\n","clf.fit(X_train,y_train)\n","\n","print('Accuracy of linear SVC on training set: {:.2f}'.format(clf.score(X_train, y_train)))\n","\n","print('Accuracy of linear SVC on test set: {:.2f}'.format(clf.score(X_test, y_test)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SCFdWJefup9s","executionInfo":{"status":"ok","timestamp":1696190981491,"user_tz":-420,"elapsed":422,"user":{"displayName":"SIA_025_Yuninda Intan","userId":"01065866818441895118"}},"outputId":"7f8f1df1-a4f1-4f4c-e5c8-9c07c931b513"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of linear SVC on training set: 1.00\n","Accuracy of linear SVC on test set: 1.00\n"]}]},{"cell_type":"code","source":["#Optimasi Parameter dengan GridSearchCV\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report\n","import numpy as np\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","c = np.logspace(start = 0, stop = 1000, base = 1.02)\n","param_grid = {'C': c}\n","\n","\n","grid = GridSearchCV(clf, param_grid =param_grid, cv=3, n_jobs=-1, scoring='accuracy')\n","grid.fit(X_train, y_train)\n","\n","print(\"The best parameters are %s with a score of %0.0f\" % (grid.best_params_, grid.best_score_ * 100 ))\n","print( \"Best estimator accuracy on test set {:.2f} \".format(grid.best_estimator_.score(X_test, y_test) * 100 ) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HnHzz6K8vEz_","executionInfo":{"status":"ok","timestamp":1696191091912,"user_tz":-420,"elapsed":382,"user":{"displayName":"SIA_025_Yuninda Intan","userId":"01065866818441895118"}},"outputId":"66a8e02b-d70b-44cc-b110-d571933bcef5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The best parameters are {'C': 37.985984338069514} with a score of 98\n","Best estimator accuracy on test set 100.00 \n"]}]},{"cell_type":"code","source":["#Non Linear SVC\n","from sklearn.svm import SVC\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","clf_SVC = SVC(C=100.0, kernel='rbf', degree=3, gamma='auto', coef0=0.0, shrinking=True,\n","          probability=False, tol=0.001, cache_size=200, class_weight=None,\n","          verbose=0, max_iter=-1, decision_function_shape=\"ovr\", random_state = 0)\n","clf_SVC.fit(X_train,y_train)\n","\n","print('Accuracy of SVC on training set: {:.2f}'.format(clf_SVC.score(X_train, y_train) * 100))\n","\n","print('Accuracy of SVC on test set: {:.2f}'.format(clf_SVC.score(X_test, y_test) * 100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dG50VOK1vP_J","executionInfo":{"status":"ok","timestamp":1696191093277,"user_tz":-420,"elapsed":16,"user":{"displayName":"SIA_025_Yuninda Intan","userId":"01065866818441895118"}},"outputId":"6b094fd8-83f0-48be-f045-aec11229a4a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of SVC on training set: 100.00\n","Accuracy of SVC on test set: 100.00\n"]}]},{"cell_type":"code","source":["#Optimasi Parameter on Linear SVC\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report\n","import numpy as np\n","\n","c_SVC = np.logspace(start = 0, stop = 10, num = 100, base = 2 , dtype = 'float64')\n","print( 'the generated array of c values')\n","print ( c_SVC )\n","param_grid_S = {'C': c_SVC}\n","\n","\n","print(\"\\n Array of means \\n\")\n","clf = GridSearchCV(clf_SVC, param_grid =param_grid_S, cv=20 , scoring='accuracy')\n","clf.fit(X_train, y_train)\n","means = clf.cv_results_['mean_test_score']\n","stds = clf.cv_results_['std_test_score']\n","print(means)\n","\n","y_true, y_pred = y_test, clf.predict(X_test)\n","print( '\\nClassification report\\n' )\n","print(classification_report(y_true, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"damshjUSvpZh","executionInfo":{"status":"ok","timestamp":1696201977983,"user_tz":-420,"elapsed":11906,"user":{"displayName":"SIA_025_Yuninda Intan","userId":"01065866818441895118"}},"outputId":"aaba2f91-8c9a-4f4b-ab71-9d3ea2a3ca52"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["the generated array of c values\n","[1.00000000e+00 1.07252413e+00 1.15030800e+00 1.23373308e+00\n"," 1.32320850e+00 1.41917304e+00 1.52209732e+00 1.63248610e+00\n"," 1.75088073e+00 1.87786182e+00 2.01405211e+00 2.16011948e+00\n"," 2.31678026e+00 2.48480272e+00 2.66501086e+00 2.85828845e+00\n"," 3.06558332e+00 3.28791207e+00 3.52636502e+00 3.78211156e+00\n"," 4.05640590e+00 4.35059319e+00 4.66611616e+00 5.00452215e+00\n"," 5.36747075e+00 5.75674188e+00 6.17424455e+00 6.62202624e+00\n"," 7.10228290e+00 7.61736977e+00 8.16981285e+00 8.76232139e+00\n"," 9.39780109e+00 1.00793684e+01 1.08103658e+01 1.15943781e+01\n"," 1.24352503e+01 1.33371059e+01 1.43043679e+01 1.53417796e+01\n"," 1.64544288e+01 1.76477719e+01 1.89276611e+01 2.03003732e+01\n"," 2.17726400e+01 2.33516817e+01 2.50452420e+01 2.68616263e+01\n"," 2.88097423e+01 3.08991436e+01 3.31400770e+01 3.55435321e+01\n"," 3.81212958e+01 4.08860094e+01 4.38512315e+01 4.70315038e+01\n"," 5.04424225e+01 5.41007151e+01 5.80243221e+01 6.22324854e+01\n"," 6.67458420e+01 7.15865259e+01 7.67782761e+01 8.23465535e+01\n"," 8.83186653e+01 9.47238993e+01 1.01593667e+02 1.08961659e+02\n"," 1.16864008e+02 1.25339468e+02 1.34429604e+02 1.44178993e+02\n"," 1.54635449e+02 1.65850250e+02 1.77878394e+02 1.90778869e+02\n"," 2.04614940e+02 2.19454460e+02 2.35370203e+02 2.52440221e+02\n"," 2.70748227e+02 2.90384006e+02 3.11443852e+02 3.34031045e+02\n"," 3.58256355e+02 3.84238584e+02 4.12105151e+02 4.41992717e+02\n"," 4.74047853e+02 5.08427759e+02 5.45301038e+02 5.84848519e+02\n"," 6.27264147e+02 6.72755931e+02 7.21546967e+02 7.73876530e+02\n"," 8.30001249e+02 8.90196364e+02 9.54757077e+02 1.02400000e+03]\n","\n"," Array of means \n","\n","[0.45089286 0.45803571 0.47232143 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714 0.48660714\n"," 0.48660714 0.48660714 0.48660714 0.48660714]\n","\n","Classification report\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.00      0.00      0.00        14\n","           1       0.37      1.00      0.54        13\n","           2       1.00      0.11      0.20         9\n","\n","    accuracy                           0.39        36\n","   macro avg       0.46      0.37      0.25        36\n","weighted avg       0.38      0.39      0.25        36\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Rqro9YXddNyE"},"execution_count":null,"outputs":[]}]}